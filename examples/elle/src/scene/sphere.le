use std/raylib;
use ../lib/enums;

global pub;

struct Sphere {
    Vector3 center,
    Color color,
    f32 intensity,
    f32 radius,
    f32 ior,
    f32 rough,
    Kind kind
}

fn Sphere::apply_on_shader(Sphere self, Shader shader, u64 i) {
    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].center".format(i)),
        &self.center,
        ShaderUniformDataType::SHADER_UNIFORM_VEC3
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].color".format(i)),
        [
            #cast(f32, self.color.r) / 255.0,
            #cast(f32, self.color.g) / 255.0,
            #cast(f32, self.color.b) / 255.0,
            #cast(f32, self.color.a) / 255.0,
        ].elements,
        ShaderUniformDataType::SHADER_UNIFORM_VEC4
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].intensity".format(i)),
        &self.intensity,
        ShaderUniformDataType::SHADER_UNIFORM_FLOAT
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].radius".format(i)),
        &self.radius,
        ShaderUniformDataType::SHADER_UNIFORM_FLOAT
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].ior".format(i)),
        &self.ior,
        ShaderUniformDataType::SHADER_UNIFORM_FLOAT
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].rough".format(i)),
        &self.rough,
        ShaderUniformDataType::SHADER_UNIFORM_FLOAT
    );

    rl::set_shader_value(
        shader,
        rl::get_shader_location(shader, "spheres[{}].kind".format(i)),
        &self.kind,
        ShaderUniformDataType::SHADER_UNIFORM_INT
    );
}
